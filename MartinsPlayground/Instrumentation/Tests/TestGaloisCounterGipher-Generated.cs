namespace Mono.Security.Instrumentation.Tests
{
	partial class TestGaloisCounterCipher
	{
		internal static readonly byte[] testkey = new byte[] {
			0x5b, 0xd4, 0x39, 0x29, 0xc8, 0x91, 0xf0, 0xbf, 0x37, 0xb8, 0xbd, 0xcb, 0xa5, 0x1e, 0x60, 0xce,
			0xd8, 0xc9, 0x72, 0x4e, 0x60, 0x5f, 0xd0, 0x2d, 0xd4, 0x93, 0xb7, 0x73, 0xc5, 0xb6, 0xd8, 0x31
		};

		internal static readonly byte[] implicitNonce = new byte[] {
			0xbd, 0x8d, 0x87, 0x1c
		};

		internal static readonly byte[] explicitNonce = new byte[] {
			0xaf, 0x22, 0x89, 0x33, 0x2b, 0x84, 0x97, 0x95
		};

		internal static readonly byte[] testData = new byte[] {
			0x81, 0x0b, 0x8c, 0x95, 0xfd, 0x40, 0xbd, 0xe9, 0xe0, 0xb5, 0x0d, 0x13, 0x4a, 0xdd, 0x30, 0xe6,
			0x44, 0x3f, 0xaa, 0x57, 0xb6, 0x9b, 0x28, 0x15, 0xbb, 0x3d, 0x66, 0x4f, 0x63, 0x7a, 0xb6, 0x56,
			0x80, 0x7c, 0x12, 0xa8, 0x7f, 0x82, 0x92, 0x5d, 0xc2, 0x92, 0xc4, 0xb1, 0x13, 0xf8, 0x80, 0x84,
			0x9f, 0xff, 0x4a, 0xc3, 0x13, 0xb0, 0xe3, 0xd1, 0x08, 0xc9, 0x55, 0x8e, 0x4e, 0x21, 0x1d, 0xd3,
			0x06, 0xd2, 0x5d, 0xc3, 0xa5, 0x6a, 0x1e, 0x00, 0xde, 0x31, 0xf5, 0xf8, 0xc2, 0xdc, 0x17, 0xb1,
			0x5f, 0xb7, 0xe1, 0xf3, 0xd7, 0x8a, 0x00, 0x7e, 0xd2, 0xf2, 0xdb, 0x6e, 0x84, 0xdc, 0xcc, 0x00,
			0xc7, 0xa9, 0x85, 0xf8, 0x75, 0x52, 0xa3, 0x21, 0xc8, 0xcd, 0xc2, 0x28, 0x30, 0xbc, 0xba, 0x11,
			0xf4, 0x84, 0x0b, 0xa2, 0x42, 0xed, 0x98, 0x94, 0xba, 0xfe, 0xaf, 0x65, 0x50, 0xca, 0x81, 0x1b
		};

		internal static readonly byte[] magicData = new byte[] {
			0x07, 0xbf, 0x3c, 0x41, 0xf9, 0xe3, 0x64, 0x6b, 0xef, 0xad, 0x6c, 0x7e, 0x27
		};

		internal static readonly byte[] magicData2 = new byte[] {
			0x12, 0xae, 0x23, 0x41, 0x3a, 0x41, 0x09, 0x6c, 0xfd, 0x48, 0x79, 0x3a, 0x9b, 0xd3, 0x93, 0x75,
			0xbb, 0x8d, 0x9f, 0xfb, 0x07
		};

		internal static readonly byte[] helloWorld = new byte[] {
			0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21
		};

		internal static readonly byte[] helloWorldResult = new byte[] {
			0xaf, 0x22, 0x89, 0x33, 0x2b, 0x84, 0x97, 0x95, 0xff, 0xa2, 0x2b, 0x31, 0x3e, 0xff, 0xa3, 0x91,
			0x9f, 0x89, 0xa3, 0xff, 0x72, 0x98, 0x0a, 0xe4, 0xbc, 0x55, 0x4e, 0xd7, 0x22, 0xd1, 0x0d, 0xca,
			0x78, 0x5c, 0x5e, 0xd8
		};

		internal static readonly byte[] testData0Result = new byte[] {
			0xaf, 0x22, 0x89, 0x33, 0x2b, 0x84, 0x97, 0x95, 0xe9, 0x7c, 0x4f, 0xa7, 0xfb, 0x14, 0x85, 0x67,
			0xc5, 0xeb, 0xf5, 0x58, 0x27, 0xf7, 0x6f, 0xf9
		};

		internal static readonly byte[] testDataResult = new byte[] {
			0xaf, 0x22, 0x89, 0x33, 0x2b, 0x84, 0x97, 0x95, 0x36, 0xcc, 0xcb, 0xc8, 0xac, 0x9f, 0x49, 0x17,
			0x0d, 0x50, 0xca, 0xcd, 0x20, 0x01, 0x20, 0xb2, 0x5f, 0xea, 0x81, 0xe9, 0x6f, 0xfe, 0x3d, 0x9b,
			0x08, 0x34, 0x31, 0x22, 0xe7, 0xf3, 0xf3, 0x04, 0xcc, 0x29, 0xa5, 0x68, 0x55, 0xb6, 0xe0, 0x50,
			0x30, 0xbd, 0x90, 0xb1, 0xe5, 0xdb, 0x62, 0x23, 0xe7, 0x79, 0xe8, 0xce, 0xeb, 0x99, 0x4f, 0xcc,
			0xde, 0x0d, 0x33, 0x3d, 0x9b, 0x44, 0x74, 0x10, 0x4f, 0x3e, 0xb0, 0x04, 0xbb, 0xe1, 0xd6, 0xdd,
			0x30, 0xef, 0x12, 0xa4, 0x23, 0xa7, 0xd7, 0x54, 0x2e, 0xee, 0x3c, 0x97, 0xb1, 0xa2, 0x71, 0x1e,
			0xe6, 0x89, 0xc6, 0x71, 0x33, 0xaa, 0x30, 0xd2, 0x91, 0xd3, 0x92, 0x52, 0x6a, 0x5e, 0x3b, 0x88,
			0x5e, 0x9d, 0x25, 0x90, 0x3e, 0x03, 0x39, 0x84, 0x33, 0x26, 0x59, 0x60, 0x64, 0xb5, 0x66, 0x9a,
			0x2c, 0x35, 0xd4, 0xac, 0x69, 0x7c, 0xde, 0x75, 0x8d, 0x50, 0x49, 0xd3, 0xfc, 0xa7, 0xff, 0xbc,
			0x04, 0x6d, 0x3e, 0x3f, 0x83, 0x1a, 0x60, 0xc6
		};

	}
}
